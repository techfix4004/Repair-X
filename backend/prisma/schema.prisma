// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Organization/Tenant Management
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique // for tenant routing
  domain      String?  @unique // custom domain for white-label

  // Contact information
  contactEmail String
  contactPhone String?
  address      String?

  // Subscription and billing
  subscriptionTier String @default("BASIC") // BASIC, PROFESSIONAL, ENTERPRISE
  isActive     Boolean @default(true)

  // Settings
  settings     Json? // Organization-specific settings

  // Relations
  users        User[]
  invitations  OrganizationInvitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organizations")
}

model OrganizationInvitation {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  email          String
  role           UserRole
  invitedBy      String
  inviter        User @relation("SentInvitations", fields: [invitedBy], references: [id])

  token          String @unique
  expiresAt      DateTime
  acceptedAt     DateTime?

  createdAt DateTime @default(now())

  @@unique([organizationId, email])
  @@map("organization_invitations")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  status    UserStatus @default(ACTIVE)

  // Organization binding - all users must belong to an organization (except SAAS_ADMIN)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  // For customers - they can be associated with an org through active jobs/devices
  hasActiveJobs  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Customer-specific fields
  customerProfile CustomerProfile?
  bookings       Booking[]
  reviews        Review[]
  payments       Payment[]
  devices        Device[]

  // Technician-specific fields
  technicianProfile TechnicianProfile?
  assignedBookings  Booking[] @relation("TechnicianBookings")
  technicianReviews Review[] @relation("TechnicianReviews")
  jobSheets         JobSheet[] @relation("TechnicianJobSheets")

  // SMS system relations
  smsMessages       SmsMessage[]

  // Expense system relations
  submittedExpenses Expense[] @relation("SubmittedExpenses")
  approvedExpenses  Expense[] @relation("ApprovedExpenses")

  // Quotation system relations
  customerQuotations   Quotation[] @relation("CustomerQuotations")
  preparedQuotations   Quotation[] @relation("PreparedQuotations")
  quotationApprovals   QuotationApproval[] @relation("QuotationApprovals")
  quotationRevisions   QuotationRevision[] @relation("QuotationRevisions")

  // Document system relations
  generatedDocuments   GeneratedDocument[] @relation("GeneratedDocuments")

  // Organization invitation relations
  sentInvitations      OrganizationInvitation[] @relation("SentInvitations")

  // New service relations (added from the enhanced section)
  customerSuccessProfile CustomerSuccessProfile?
  assignedInterventions  CustomerIntervention[] @relation("AssignedInterventions")
  printJobs              PrintJob[] @relation("UserPrintJobs")

  @@map("users")
}

model CustomerProfile {
  id         String @id @default(cuid())
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  address    Address?
  preferences Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customer_profiles")
}

model TechnicianProfile {
  id           String @id @default(cuid())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bio          String?
  experience   Int? // years of experience
  hourlyRate   Decimal @db.Decimal(10, 2)
  isVerified   Boolean @default(false)
  rating       Decimal? @db.Decimal(3, 2)
  totalReviews Int @default(0)

  skills       TechnicianSkill[]
  serviceAreas ServiceArea[]
  availability TechnicianAvailability[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("technician_profiles")
}

model Address {
  id             String @id @default(cuid())
  street         String
  city           String
  state          String
  zipCode        String
  country        String @default("US")
  latitude       Decimal? @db.Decimal(10, 8)
  longitude      Decimal? @db.Decimal(11, 8)

  customerProfileId String? @unique
  customerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])

  bookings       Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

// Service Management
model ServiceCategory {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  icon        String?
  isActive    Boolean @default(true)

  services    Service[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("service_categories")
}

model Service {
  id          String @id @default(cuid())
  name        String
  description String?
  basePrice   Decimal @db.Decimal(10, 2)
  estimatedDuration Int // in minutes
  isActive    Boolean @default(true)

  categoryId  String
  category    ServiceCategory @relation(fields: [categoryId], references: [id])

  bookings    Booking[]
  technicianSkills TechnicianSkill[]
  providerCapabilities ProviderCapability[] @relation("ProviderCapabilities")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model TechnicianSkill {
  id            String @id @default(cuid())
  technicianId  String
  technician    TechnicianProfile @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  serviceId     String
  service       Service @relation(fields: [serviceId], references: [id])

  experienceLevel SkillLevel @default(INTERMEDIATE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([technicianId, serviceId])
  @@map("technician_skills")
}

model ServiceArea {
  id           String @id @default(cuid())
  technicianId String
  technician   TechnicianProfile @relation(fields: [technicianId], references: [id], onDelete: Cascade)

  city         String
  state        String
  zipCode      String?
  radius       Int // in kilometers

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("service_areas")
}

// Device/Equipment Management
model Device {
  id          String @id @default(cuid())

  brand       String
  model       String
  serialNumber String?
  yearManufactured Int?
  category    String // Electronics, Appliance, Automotive, etc.
  subcategory String? // Phone, Laptop, Refrigerator, etc.

  // Physical characteristics
  color       String?
  condition   DeviceCondition @default(FAIR)

  // Ownership
  customerId  String
  customer    User @relation(fields: [customerId], references: [id])

  // Device specifications
  specifications Json? // Store device-specific details
  purchaseDate DateTime?
  warrantyExpiry DateTime?

  bookings    Booking[]
  jobSheets   JobSheet[]
  quotations  Quotation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("devices")
}

// Job Sheet Management
model JobSheet {
  id          String @id @default(cuid())
  jobNumber   String @unique // Generated job number (e.g., JS-2024-001234)

  bookingId   String @unique
  booking     Booking @relation(fields: [bookingId], references: [id])

  deviceId    String
  device      Device @relation(fields: [deviceId], references: [id])

  technicianId String?
  technician   User? @relation("TechnicianJobSheets", fields: [technicianId], references: [id])

  // Job details
  problemDescription String
  diagnosisNotes     String?
  repairActions      Json? // Array of repair steps taken
  partsUsed          JobSheetPart[]

  // Quality checkpoints
  qualityChecks      Json? // Six Sigma quality checkpoints
  testingResults     Json? // Post-repair testing results

  // Time tracking
  estimatedHours     Decimal @db.Decimal(5, 2)
  actualHours        Decimal? @db.Decimal(5, 2)

  startedAt          DateTime?
  completedAt        DateTime?

  status             JobSheetStatus @default(CREATED)
  priority           Priority @default(MEDIUM)

  // Customer communication
  customerApprovalRequired Boolean @default(false)
  customerApprovedAt       DateTime?

  // Pricing
  laborCost          Decimal @db.Decimal(10, 2)
  partsCost          Decimal? @db.Decimal(10, 2)
  totalCost          Decimal? @db.Decimal(10, 2)

  // Documentation
  beforePhotos       Json? // Array of photo URLs
  afterPhotos        Json? // Array of photo URLs
  warrantyCoverage   String? // Warranty provided on repair

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations to new systems
  expenses     Expense[]
  quotation    Quotation?
  outsourcedJob OutsourcedJob?
  generatedDocuments GeneratedDocument[]
  printJobs    PrintJob[] // Added from enhanced section

  @@map("job_sheets")
}

// Parts used in job sheets
model JobSheetPart {
  id          String @id @default(cuid())

  jobSheetId  String
  jobSheet    JobSheet @relation(fields: [jobSheetId], references: [id], onDelete: Cascade)

  partName    String
  partNumber  String?
  quantity    Int @default(1)
  unitCost    Decimal @db.Decimal(10, 2)
  totalCost   Decimal @db.Decimal(10, 2)
  supplier    String?

  createdAt DateTime @default(now())

  @@map("job_sheet_parts")
}

// Booking Management (Enhanced)
model Booking {
  id          String @id @default(cuid())

  customerId  String
  customer    User @relation(fields: [customerId], references: [id])

  technicianId String?
  technician   User? @relation("TechnicianBookings", fields: [technicianId], references: [id])

  serviceId   String
  service     Service @relation(fields: [serviceId], references: [id])

  deviceId    String?
  device      Device? @relation(fields: [deviceId], references: [id])

  addressId   String
  address     Address @relation(fields: [addressId], references: [id])

  scheduledAt DateTime
  completedAt DateTime?

  status      BookingStatus @default(PENDING)
  priority    Priority @default(MEDIUM)

  description String?
  notes       String?

  estimatedPrice Decimal @db.Decimal(10, 2)
  finalPrice     Decimal? @db.Decimal(10, 2)

  // Enhanced fields for job workflow
  problemSummary  String?
  customerRequestDetails Json? // Detailed customer requirements

  payment     Payment?
  review      Review?
  messages    Message[]
  attachments BookingAttachment[]
  jobSheet    JobSheet?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations to new systems
  smsMessages SmsMessage[]
  generatedDocuments GeneratedDocument[]

  @@map("bookings")
}

model Payment {
  id              String @id @default(cuid())

  bookingId       String @unique
  booking         Booking @relation(fields: [bookingId], references: [id])

  userId          String
  user            User @relation(fields: [userId], references: [id])

  amount          Decimal @db.Decimal(10, 2)
  currency        String @default("USD")

  status          PaymentStatus @default(PENDING)
  method          PaymentMethod

  stripePaymentIntentId String?

  paidAt          DateTime?
  refundedAt      DateTime?
  refundAmount    Decimal? @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

// Communication
model Message {
  id        String @id @default(cuid())

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  senderId  String
  sender    User @relation(fields: [senderId], references: [id])

  content   String
  type      MessageType @default(TEXT)

  readAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

// Reviews and Ratings
model Review {
  id          String @id @default(cuid())

  bookingId   String @unique
  booking     Booking @relation(fields: [bookingId], references: [id])

  customerId  String
  customer    User @relation(fields: [customerId], references: [id])

  technicianId String
  technician   User @relation("TechnicianReviews", fields: [technicianId], references: [id])

  rating      Int // 1-5 stars
  comment     String?

  isVisible   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

// File Management
model BookingAttachment {
  id        String @id @default(cuid())

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String

  uploadedBy String
  uploader   User @relation(fields: [uploadedBy], references: [id])

  createdAt DateTime @default(now())

  @@map("booking_attachments")
}

// Technician Availability
model TechnicianAvailability {
  id            String @id @default(cuid())

  technicianId  String
  technician    TechnicianProfile @relation(fields: [technicianId], references: [id], onDelete: Cascade)

  dayOfWeek     Int // 0-6 (Sunday-Saturday)
  startTime     String // HH:mm format
  endTime       String // HH:mm format

  isAvailable   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([technicianId, dayOfWeek, startTime])
  @@map("technician_availability")
}

// Business Settings Management (20+ Categories)
model BusinessSettings {
  id          String @id @default(cuid())

  category    BusinessSettingCategory
  subcategory String? // For nested settings within categories
  key         String
  value       Json // Flexible storage for different data types
  dataType    SettingDataType @default(STRING)

  // Metadata
  label       String
  description String?
  isRequired  Boolean @default(false)
  isActive    Boolean @default(true)

  // Validation rules
  validationRules Json? // Store validation rules as JSON

  // Organization/tenant level
  tenantId    String? // For multi-tenant support

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([category, key, tenantId])
  @@map("business_settings")
}

// SMS Management System
model SmsAccount {
  id            String @id @default(cuid())

  providerName  String // Twilio, AWS SNS, etc.
  accountSid    String
  authToken     String // Encrypted
  fromNumber    String

  creditsRemaining Int @default(0)
  creditsUsed      Int @default(0)
  autoTopUp        Boolean @default(false)
  topUpThreshold   Int @default(100)
  topUpAmount      Int @default(1000)

  isActive      Boolean @default(true)
  isPrimary     Boolean @default(false)

  smsMessages   SmsMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sms_accounts")
}

model SmsMessage {
  id            String @id @default(cuid())

  accountId     String
  account       SmsAccount @relation(fields: [accountId], references: [id])

  toNumber      String
  fromNumber    String
  message       String

  status        SmsStatus @default(PENDING)
  externalId    String? // Provider message ID

  deliveredAt   DateTime?
  failedAt      DateTime?
  errorMessage  String?

  // Cost tracking
  cost          Decimal? @db.Decimal(10, 4)
  currency      String @default("USD")

  // Template and automation
  templateName  String?
  triggerEvent  String?

  // Related entities
  bookingId     String?
  booking       Booking? @relation(fields: [bookingId], references: [id])

  userId        String?
  user          User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sms_messages")
}

// Expense Management System
model ExpenseCategory {
  id          String @id @default(cuid())

  name        String
  description String?
  parentId    String? // For hierarchical categories
  parent      ExpenseCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ExpenseCategory[] @relation("CategoryHierarchy")

  // Budget settings
  monthlyBudget Decimal? @db.Decimal(10, 2)
  isActive    Boolean @default(true)

  expenses    Expense[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, parentId])
  @@map("expense_categories")
}

model Expense {
  id            String @id @default(cuid())

  categoryId    String
  category      ExpenseCategory @relation(fields: [categoryId], references: [id])

  submittedBy   String
  submitter     User @relation("SubmittedExpenses", fields: [submittedBy], references: [id])

  approvedBy    String?
  approver      User? @relation("ApprovedExpenses", fields: [approvedBy], references: [id])

  amount        Decimal @db.Decimal(10, 2)
  currency      String @default("USD")

  description   String
  notes         String?

  expenseDate   DateTime
  status        ExpenseStatus @default(PENDING)

  // Receipt information
  receiptUrl    String?
  receiptText   String? // OCR extracted text
  merchant      String?

  // Tax and compliance
  taxAmount     Decimal? @db.Decimal(10, 2)
  taxDeductible Boolean @default(false)

  // Reimbursement
  isReimbursable Boolean @default(true)
  reimbursedAt   DateTime?
  reimbursementAmount Decimal? @db.Decimal(10, 2)

  // Related entities
  jobSheetId    String?
  jobSheet      JobSheet? @relation(fields: [jobSheetId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenses")
}

// Quotation System with Multi-Approval Workflow
model Quotation {
  id            String @id @default(cuid())
  quoteNumber   String @unique

  customerId    String
  customer      User @relation("CustomerQuotations", fields: [customerId], references: [id])

  deviceId      String?
  device        Device? @relation(fields: [deviceId], references: [id])

  preparedBy    String
  preparedByUser User @relation("PreparedQuotations", fields: [preparedBy], references: [id])

  // Quote details
  title         String
  description   String
  notes         String?

  // Pricing
  subtotal      Decimal @db.Decimal(10, 2)
  taxAmount     Decimal? @db.Decimal(10, 2)
  discountAmount Decimal? @db.Decimal(10, 2)
  totalAmount   Decimal @db.Decimal(10, 2)

  // Validity
  validUntil    DateTime

  // Status and workflow
  status        QuotationStatus @default(DRAFT)
  revisionNumber Int @default(1)

  // Customer interaction
  customerViewedAt DateTime?
  customerApprovedAt DateTime?
  customerRejectedAt DateTime?
  rejectionReason   String?

  // Digital signature
  customerSignature Json? // Signature data
  signedAt          DateTime?

  // Conversion
  convertedToJobAt  DateTime?
  jobSheetId        String? @unique
  jobSheet          JobSheet? @relation(fields: [jobSheetId], references: [id])

  // Line items and approvals
  items         QuotationItem[]
  approvals     QuotationApproval[]
  revisions     QuotationRevision[]
  printJobs     PrintJob[] // Added from enhanced section

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quotations")
}

model QuotationItem {
  id            String @id @default(cuid())

  quotationId   String
  quotation     Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  itemType      QuoteItemType @default(SERVICE)
  name          String
  description   String?

  quantity      Decimal @db.Decimal(10, 3)
  unitPrice     Decimal @db.Decimal(10, 2)
  totalPrice    Decimal @db.Decimal(10, 2)

  // Additional details
  partNumber    String?
  warranty      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quotation_items")
}

model QuotationApproval {
  id            String @id @default(cuid())

  quotationId   String
  quotation     Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  approverRole  QuotationApproverRole
  approverId    String?
  approver      User? @relation("QuotationApprovals", fields: [approverId], references: [id])

  requiredAmount Decimal? @db.Decimal(10, 2) // Minimum amount requiring this approval
  status        ApprovalStatus @default(PENDING)

  approvedAt    DateTime?
  rejectedAt    DateTime?
  comments      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quotation_approvals")
}

model QuotationRevision {
  id            String @id @default(cuid())

  quotationId   String
  quotation     Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  revisionNumber Int
  changes       Json // Store what changed
  revisedBy     String
  reviser       User @relation("QuotationRevisions", fields: [revisedBy], references: [id])

  reason        String?

  createdAt DateTime @default(now())

  @@unique([quotationId, revisionNumber])
  @@map("quotation_revisions")
}

// Outsourcing Marketplace
model ServiceProvider {
  id            String @id @default(cuid())

  businessName  String
  contactName   String
  email         String @unique
  phone         String

  // Business details
  businessType  ProviderBusinessType
  description   String?
  website       String?

  // Verification
  isVerified    Boolean @default(false)
  verificationDate DateTime?
  licenseNumber String?
  insuranceCertificate String?

  // Performance metrics
  rating        Decimal? @db.Decimal(3, 2)
  totalJobs     Int @default(0)
  completedJobs Int @default(0)

  // Financial
  commissionRate Decimal @db.Decimal(5, 2) // Percentage
  paymentTerms  String?

  // Service areas and capabilities
  serviceAreas  ProviderServiceArea[]
  capabilities  ProviderCapability[]
  outsourcedJobs OutsourcedJob[]

  isActive      Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("service_providers")
}

model ProviderServiceArea {
  id           String @id @default(cuid())

  providerId   String
  provider     ServiceProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  city         String
  state        String
  zipCode      String?
  radius       Int // kilometers

  createdAt DateTime @default(now())

  @@map("provider_service_areas")
}

model ProviderCapability {
  id           String @id @default(cuid())

  providerId   String
  provider     ServiceProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  serviceId    String
  service      Service @relation("ProviderCapabilities", fields: [serviceId], references: [id])

  skillLevel   SkillLevel @default(INTERMEDIATE)
  hourlyRate   Decimal? @db.Decimal(10, 2)

  createdAt DateTime @default(now())

  @@unique([providerId, serviceId])
  @@map("provider_capabilities")
}

model OutsourcedJob {
  id            String @id @default(cuid())

  jobSheetId    String @unique
  jobSheet      JobSheet @relation(fields: [jobSheetId], references: [id])

  providerId    String
  provider      ServiceProvider @relation(fields: [providerId], references: [id])

  agreedPrice   Decimal @db.Decimal(10, 2)
  commissionAmount Decimal @db.Decimal(10, 2)

  status        OutsourceStatus @default(ASSIGNED)

  assignedAt    DateTime @default(now())
  completedAt   DateTime?

  // Provider feedback
  providerNotes String?
  qualityRating Int? // 1-5

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("outsourced_jobs")
}

// Document Templates and Print Management
model DocumentTemplate {
  id            String @id @default(cuid())

  name          String
  type          DocumentType
  description   String?

  // Template content
  htmlTemplate  String
  cssStyles     String?

  // Variables and fields
  availableFields Json // List of fields that can be used

  // Branding
  includeLogo   Boolean @default(true)
  includeHeader Boolean @default(true)
  includeFooter Boolean @default(true)

  // Settings
  isDefault     Boolean @default(false)
  isActive      Boolean @default(true)

  // Multi-tenant support
  tenantId      String?

  // Generated documents
  documents     GeneratedDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, type, tenantId])
  @@map("document_templates")
}

model GeneratedDocument {
  id            String @id @default(cuid())

  templateId    String
  template      DocumentTemplate @relation(fields: [templateId], references: [id])

  // Document details
  filename      String
  filePath      String
  fileSize      Int
  mimeType      String

  // Related entities
  jobSheetId    String?
  jobSheet      JobSheet? @relation(fields: [jobSheetId], references: [id])

  quotationId   String?
  quotation     Quotation? @relation(fields: [quotationId], references: [id])

  bookingId     String?
  booking       Booking? @relation(fields: [bookingId], references: [id])

  // Generation context
  generatedBy   String
  generator     User @relation("GeneratedDocuments", fields: [generatedBy], references: [id])

  generatedData Json // Data used to generate the document

  createdAt DateTime @default(now())

  @@map("generated_documents")
}

// Enums
enum UserRole {
  CUSTOMER
  TECHNICIAN
  DISPATCHER
  ADMIN
  SUPER_ADMIN
  SAAS_ADMIN
  ORGANIZATION_OWNER
  ORGANIZATION_MANAGER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum DeviceCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
}

enum JobSheetStatus {
  CREATED
  IN_DIAGNOSIS
  AWAITING_APPROVAL
  APPROVED
  IN_PROGRESS
  PARTS_ORDERED
  TESTING
  QUALITY_CHECK
  COMPLETED
  CUSTOMER_APPROVED
  DELIVERED
  CANCELLED
}

// Business Settings Enums
enum BusinessSettingCategory {
  TAX_SETTINGS
  PRINT_SETTINGS
  WORKFLOW_CONFIGURATION
  EMAIL_SETTINGS
  SMS_SETTINGS
  EMPLOYEE_MANAGEMENT
  CUSTOMER_DATABASE
  INVOICE_SETTINGS
  QUOTATION_SETTINGS
  PAYMENT_SETTINGS
  ADDRESS_LOCATION_SETTINGS
  REMINDER_SYSTEM
  BUSINESS_INFORMATION
  SEQUENCE_SETTINGS
  EXPENSE_MANAGEMENT
  PARTS_INVENTORY_SETTINGS
  OUTSOURCING_SETTINGS
  QUALITY_SETTINGS
  SECURITY_SETTINGS
  INTEGRATION_SETTINGS
}

enum SettingDataType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  DATE
  ARRAY
}

// SMS Management Enums
enum SmsStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

// Expense Management Enums
enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  REIMBURSED
}

// Quotation System Enums
enum QuotationStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  SENT_TO_CUSTOMER
  CUSTOMER_APPROVED
  CUSTOMER_REJECTED
  EXPIRED
  CONVERTED_TO_JOB
}

enum QuoteItemType {
  SERVICE
  PART
  LABOR
  MATERIAL
  TRAVEL
  DIAGNOSTIC
}

enum QuotationApproverRole {
  SUPERVISOR
  MANAGER
  SENIOR_MANAGER
  DIRECTOR
  OWNER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  DELEGATED
}

// Outsourcing Marketplace Enums
enum ProviderBusinessType {
  INDIVIDUAL
  PARTNERSHIP
  LLC
  CORPORATION
  FRANCHISE
}

enum OutsourceStatus {
  ASSIGNED
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
}

// Document Management Enums
enum DocumentType {
  JOB_SHEET
  QUOTATION
  INVOICE
  RECEIPT
  WARRANTY_CERTIFICATE
  SERVICE_REPORT
  CUSTOMER_AGREEMENT
}

// App Store Optimization Models
model AppStoreOptimization {
  id            String @id @default(cuid())

  platform      AppPlatform
  appName       String
  appId         String?
  status        AppOptimizationStatus @default(DRAFT)

  // App metadata
  title         String
  subtitle      String?
  description   String
  shortDescription String?
  keywords      String[]
  category      String
  subcategory   String?
  contentRating String
  version       String
  releaseNotes  String

  // URLs and assets
  privacyPolicyUrl String
  termsOfServiceUrl String
  supportUrl       String
  marketingUrl     String?
  appIconUrl       String?

  // Performance metrics
  impressions      Int @default(0)
  installs         Int @default(0)
  conversionRate   Decimal @default(0) @db.Decimal(5, 4)
  keywordRankings  Json? // Array of keyword ranking data

  // A/B Testing
  screenshots      AppScreenshot[]
  abTests          AppABTest[]

  // Localization
  localizations    AppLocalization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("app_store_optimizations")
}

model AppScreenshot {
  id               String @id @default(cuid())

  appOptimizationId String
  appOptimization   AppStoreOptimization @relation(fields: [appOptimizationId], references: [id], onDelete: Cascade)

  deviceType       String // iPhone, iPad, Android Phone, Android Tablet
  orientation      ScreenshotOrientation
  title            String
  description      String
  imageUrl         String
  orderIndex       Int

  // Performance tracking
  conversionRate   Decimal @default(0) @db.Decimal(5, 4)
  clickThroughRate Decimal @default(0) @db.Decimal(5, 4)
  viewDuration     Decimal @default(0) @db.Decimal(6, 2) // seconds

  isActive         Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("app_screenshots")
}

model AppABTest {
  id               String @id @default(cuid())

  appOptimizationId String
  appOptimization   AppStoreOptimization @relation(fields: [appOptimizationId], references: [id], onDelete: Cascade)

  testName         String
  testType         ABTestType
  status           ABTestStatus @default(RUNNING)

  // Test configuration
  trafficSplit     Decimal @db.Decimal(3, 2) // 50.00 for 50%
  startDate        DateTime
  endDate          DateTime?

  // Variants
  controlVariant   Json // Control version data
  testVariant      Json // Test version data

  // Results
  controlConversions Int @default(0)
  testConversions    Int @default(0)
  controlImpressions Int @default(0)
  testImpressions    Int @default(0)

  winningVariant   ABTestWinner?
  confidence       Decimal? @db.Decimal(5, 4)
  improvement      Decimal? @db.Decimal(6, 4) // Percentage improvement

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("app_ab_tests")
}

model AppLocalization {
  id               String @id @default(cuid())

  appOptimizationId String
  appOptimization   AppStoreOptimization @relation(fields: [appOptimizationId], references: [id], onDelete: Cascade)

  language         String
  region           String?
  title            String
  description      String
  keywords         String[]
  promotionalText  String?
  releaseNotes     String

  // Cultural adaptations
  culturalNotes    String?
  localizedAssets  Json? // Localized screenshots, icons, etc.

  status           LocalizationStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([appOptimizationId, language, region])
  @@map("app_localizations")
}

// Launch Campaign Models
model LaunchCampaign {
  id              String @id @default(cuid())

  name            String
  description     String?
  type            CampaignType
  status          CampaignStatus @default(PLANNING)

  // Timeline
  startDate       DateTime
  endDate         DateTime
  budget          Decimal @db.Decimal(12, 2)
  actualSpend     Decimal @default(0) @db.Decimal(12, 2)

  // Targeting
  targetAudience  Json? // Audience targeting criteria
  channels        CampaignChannel[]
  objectives      CampaignObjective[]

  // Performance metrics
  impressions     Int @default(0)
  clicks          Int @default(0)
  conversions     Int @default(0)
  revenue         Decimal @default(0) @db.Decimal(12, 2)

  // Content and assets
  content         CampaignContent[]
  mediaOutreach   MediaOutreach[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("launch_campaigns")
}

model CampaignChannel {
  id              String @id @default(cuid())

  campaignId      String
  campaign        LaunchCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  channelType     MarketingChannelType
  channelName     String
  budget          Decimal @db.Decimal(10, 2)
  actualSpend     Decimal @default(0) @db.Decimal(10, 2)

  // Performance
  impressions     Int @default(0)
  clicks          Int @default(0)
  conversions     Int @default(0)

  // Configuration
  configuration   Json? // Channel-specific settings
  isActive        Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("campaign_channels")
}

model CampaignObjective {
  id              String @id @default(cuid())

  campaignId      String
  campaign        LaunchCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  objectiveType   ObjectiveType
  targetValue     Decimal @db.Decimal(12, 2)
  currentValue    Decimal @default(0) @db.Decimal(12, 2)

  description     String?
  priority        Priority @default(MEDIUM)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("campaign_objectives")
}

model CampaignContent {
  id              String @id @default(cuid())

  campaignId      String
  campaign        LaunchCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  contentType     ContentType
  title           String
  content         String

  // Asset URLs
  imageUrl        String?
  videoUrl        String?
  documentUrl     String?

  // Targeting
  targetChannels  String[] // Which channels to use this content for

  // Performance
  impressions     Int @default(0)
  clicks          Int @default(0)
  engagements     Int @default(0)

  isActive        Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("campaign_content")
}

model MediaOutreach {
  id              String @id @default(cuid())

  campaignId      String
  campaign        LaunchCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  contactName     String
  contactEmail    String
  contactPhone    String?
  organization    String

  outreachType    OutreachType
  status          OutreachStatus @default(PLANNED)

  subject         String?
  message         String?

  // Follow-up tracking
  sentAt          DateTime?
  respondedAt     DateTime?
  response        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("media_outreach")
}

// Customer Success Automation Models
model CustomerSuccessProfile {
  id              String @id @default(cuid())

  customerId      String @unique
  customer        User @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Health scoring
  healthScore     Decimal @db.Decimal(5, 2) // 0-100
  engagementScore Decimal @db.Decimal(5, 2) // 0-100
  adoptionScore   Decimal @db.Decimal(5, 2) // 0-100
  satisfactionScore Decimal @db.Decimal(5, 2) // 0-100

  // Risk assessment
  churnRisk       ChurnRiskLevel @default(LOW)
  riskFactors     String[] // List of identified risk factors

  // Business metrics
  lifetimeValue   Decimal @db.Decimal(12, 2)
  totalRevenue    Decimal @db.Decimal(12, 2)
  totalJobs       Int @default(0)
  avgJobValue     Decimal @db.Decimal(10, 2)

  // Success milestones
  milestones      SuccessMilestone[]
  interventions   CustomerIntervention[]
  automationRules SuccessAutomationRule[]

  lastUpdated     DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customer_success_profiles")
}

model SuccessMilestone {
  id              String @id @default(cuid())

  profileId       String
  profile         CustomerSuccessProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  milestoneType   MilestoneType
  name            String
  description     String?

  targetValue     Decimal? @db.Decimal(12, 2)
  currentValue    Decimal @default(0) @db.Decimal(12, 2)

  isAchieved      Boolean @default(false)
  achievedAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("success_milestones")
}

model CustomerIntervention {
  id              String @id @default(cuid())

  profileId       String
  profile         CustomerSuccessProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  interventionType InterventionType
  trigger         String // What triggered this intervention

  // Intervention details
  title           String
  description     String
  actionTaken     String?

  status          InterventionStatus @default(PLANNED)
  priority        Priority @default(MEDIUM)

  // Assignment
  assignedTo      String?
  assignee        User? @relation("AssignedInterventions", fields: [assignedTo], references: [id])

  // Timeline
  scheduledAt     DateTime?
  executedAt      DateTime?
  completedAt     DateTime?

  // Results
  outcome         String?
  impactScore     Decimal? @db.Decimal(5, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customer_interventions")
}

model SuccessAutomationRule {
  id              String @id @default(cuid())

  profileId       String?
  profile         CustomerSuccessProfile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  name            String
  description     String?

  // Rule configuration
  triggerType     AutomationTriggerType
  triggerConditions Json // Conditions that trigger this rule

  // Actions
  actions         Json // Actions to take when triggered

  // Settings
  isActive        Boolean @default(true)
  priority        Int @default(1)

  // Execution tracking
  lastExecuted    DateTime?
  executionCount  Int @default(0)
  successRate     Decimal @default(0) @db.Decimal(5, 4)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("success_automation_rules")
}

// Visual Regression Testing Models
model VisualRegressionSuite {
  id              String @id @default(cuid())

  name            String
  description     String?
  baseUrl         String

  // Configuration
  browsers        String[] // Chrome, Firefox, Safari, Edge
  devices         String[] // Desktop, Mobile, Tablet
  viewports       Json // Array of viewport sizes

  // Test settings
  threshold       Decimal @db.Decimal(5, 4) // Difference threshold
  ignoreElements  String[] // CSS selectors to ignore

  isActive        Boolean @default(true)

  // Test runs
  testRuns        VisualTestRun[]
  baselines       VisualBaseline[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("visual_regression_suites")
}

model VisualTestRun {
  id              String @id @default(cuid())

  suiteId         String
  suite           VisualRegressionSuite @relation(fields: [suiteId], references: [id], onDelete: Cascade)

  runNumber       Int
  status          TestRunStatus @default(RUNNING)

  // Configuration for this run
  gitCommit       String?
  branch          String?
  environment     String @default("staging")

  // Results
  totalTests      Int @default(0)
  passedTests     Int @default(0)
  failedTests     Int @default(0)

  startedAt       DateTime @default(now())
  completedAt     DateTime?

  // Test results
  testResults     VisualTestResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([suiteId, runNumber])
  @@map("visual_test_runs")
}

model VisualTestResult {
  id              String @id @default(cuid())

  testRunId       String
  testRun         VisualTestRun @relation(fields: [testRunId], references: [id], onDelete: Cascade)

  testName        String
  url             String
  browser         String
  device          String
  viewport        String

  status          TestResultStatus @default(PENDING)

  // Image data
  baselineImageUrl String?
  currentImageUrl  String
  diffImageUrl     String?

  // Diff analysis
  diffPercentage   Decimal? @db.Decimal(7, 4)
  pixelDiff        Int?

  // Error handling
  errorMessage     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("visual_test_results")
}

model VisualBaseline {
  id              String @id @default(cuid())

  suiteId         String
  suite           VisualRegressionSuite @relation(fields: [suiteId], references: [id], onDelete: Cascade)

  testName        String
  url             String
  browser         String
  device          String
  viewport        String

  imageUrl        String
  imageHash       String // For quick comparison

  // Metadata
  createdFromRun  String? // Test run ID this baseline was created from
  isActive        Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([suiteId, testName, browser, device, viewport])
  @@map("visual_baselines")
}

// Mobile Printing Models
model PrintJob {
  id              String @id @default(cuid())

  jobNumber       String @unique

  // Source
  userId          String
  user            User @relation("UserPrintJobs", fields: [userId], references: [id])

  // Print configuration
  printerName     String
  printerType     PrinterType

  // Document details
  documentType    PrintDocumentType
  documentUrl     String
  fileName        String

  // Print settings
  pageSize        PageSize @default(A4)
  orientation     PrintOrientation @default(PORTRAIT)
  copies          Int @default(1)
  colorMode       ColorMode @default(GRAYSCALE)
  quality         PrintQuality @default(NORMAL)

  // Status and tracking
  status          PrintJobStatus @default(QUEUED)
  progress        Int @default(0) // 0-100

  // Error handling
  errorMessage    String?
  retryCount      Int @default(0)
  maxRetries      Int @default(3)

  // Timing
  queuedAt        DateTime @default(now())
  startedAt       DateTime?
  completedAt     DateTime?

  // Cost tracking
  estimatedCost   Decimal? @db.Decimal(8, 4)
  actualCost      Decimal? @db.Decimal(8, 4)

  // Related entities
  jobSheetId      String?
  jobSheet        JobSheet? @relation(fields: [jobSheetId], references: [id])

  quotationId     String?
  quotation       Quotation? @relation(fields: [quotationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("print_jobs")
}

model PrinterConfiguration {
  id              String @id @default(cuid())

  name            String
  type            PrinterType
  manufacturer    String
  model           String

  // Network configuration
  ipAddress       String?
  port            Int?
  macAddress      String?

  // Capabilities
  supportedFormats String[] // PDF, JPEG, PNG, etc.
  maxPageSize     PageSize
  colorSupport    Boolean @default(false)
  duplexSupport   Boolean @default(false)

  // Status
  isOnline        Boolean @default(false)
  lastOnline      DateTime?

  // Consumables tracking
  tonerLevel      Int? // 0-100
  paperLevel      Int? // 0-100

  // Location
  location        String?
  department      String?

  isActive        Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
  @@map("printer_configurations")
}

// New Enums for the services
enum AppPlatform {
  IOS
  ANDROID
  BOTH
}

enum AppOptimizationStatus {
  DRAFT
  OPTIMIZING
  TESTING
  SUBMITTED
  LIVE
  REJECTED
}

enum ScreenshotOrientation {
  PORTRAIT
  LANDSCAPE
}

enum ABTestType {
  ICON
  SCREENSHOTS
  DESCRIPTION
  KEYWORDS
  TITLE
}

enum ABTestStatus {
  DRAFT
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum ABTestWinner {
  CONTROL
  VARIANT
  INCONCLUSIVE
}

enum LocalizationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REVIEW
  APPROVED
}

enum CampaignType {
  PRODUCT_LAUNCH
  FEATURE_LAUNCH
  BRAND_AWARENESS
  LEAD_GENERATION
  CUSTOMER_RETENTION
  UPSELL
}

enum CampaignStatus {
  PLANNING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum MarketingChannelType {
  EMAIL
  SMS
  SOCIAL_MEDIA
  PAID_ADS
  CONTENT_MARKETING
  PR
  INFLUENCER
  AFFILIATE
  DIRECT_MAIL
  WEBINAR
}

enum ObjectiveType {
  AWARENESS
  LEADS
  CONVERSIONS
  REVENUE
  DOWNLOADS
  SIGNUPS
  ENGAGEMENT
}

enum ContentType {
  EMAIL
  SOCIAL_POST
  BLOG_ARTICLE
  PRESS_RELEASE
  AD_CREATIVE
  VIDEO
  INFOGRAPHIC
  LANDING_PAGE
}

enum OutreachType {
  PRESS_RELEASE
  INTERVIEW
  PRODUCT_DEMO
  PARTNERSHIP
  SPEAKING_OPPORTUNITY
}

enum OutreachStatus {
  PLANNED
  SENT
  RESPONDED
  SCHEDULED
  COMPLETED
  DECLINED
}

enum ChurnRiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MilestoneType {
  ONBOARDING
  FIRST_SUCCESS
  FEATURE_ADOPTION
  REVENUE
  ENGAGEMENT
  RETENTION
}

enum InterventionType {
  ONBOARDING_SUPPORT
  FEATURE_TRAINING
  SUCCESS_CHECK_IN
  RISK_MITIGATION
  UPSELL_OPPORTUNITY
  RENEWAL_DISCUSSION
}

enum InterventionStatus {
  PLANNED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AutomationTriggerType {
  TIME_BASED
  EVENT_BASED
  SCORE_BASED
  BEHAVIOR_BASED
}

enum TestRunStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum TestResultStatus {
  PENDING
  PASSED
  FAILED
  ERROR
  BASELINE_MISSING
}

enum PrinterType {
  THERMAL
  INKJET
  LASER
  DOT_MATRIX
  LABEL
}

enum PrintDocumentType {
  JOB_SHEET
  QUOTATION
  INVOICE
  RECEIPT
  WORK_ORDER
  REPORT
  LABEL
}

enum PageSize {
  A4
  A5
  LETTER
  LEGAL
  THERMAL_80MM
  THERMAL_58MM
  LABEL_4X6
}

enum PrintOrientation {
  PORTRAIT
  LANDSCAPE
}

enum ColorMode {
  COLOR
  GRAYSCALE
  MONOCHROME
}

enum PrintQuality {
  DRAFT
  NORMAL
  HIGH
  PHOTO
}

enum PrintJobStatus {
  QUEUED
  PROCESSING
  PRINTING
  COMPLETED
  FAILED
  CANCELLED
}
